                                 第一章
// 、、、、、、、、、、、、、、、、、 基本操作 、、、、、、、、、、、、、、、、、、 //
1. 初始化新仓库
   git init

2. 从现有仓库克隆
   git clone url

3. 检查当前文件状态
   git status

4. 跟踪新文件
  a>
    git add file
  b> 跟踪所有更改的文件
    git add .

5. 查看已暂存和未暂存的更新（更详细的文件状态）
  a>
    git diff
  b> 已暂存文件和上次提交的快照之间差异
    git diff --cached 或
    git diff --staged (git 1.6.1 版本以上)

6. 跳过使用暂存区域（跳过 git add，但是只自动把已经跟踪过的文件一并提交，新增的不算）
   git commit -a -m 'information'

7. 移除文件
  a>
    git rm file
  example
    git rm src/index.js
  b> 移除跟踪但不删除文件
    git rm --cached file
  example
    git rm --cached src/index.js

8. 改名（存储区域）
   git mv form to
example
   git mv src/index.js src/index.html

9. 查看配置信息
  a>
    git config --list
  b> 查看具体的信息
    git config user.name


// 、、、、、、、、、、、、、、、、、 查看提交历史 、、、、、、、、、、、、、、、、、、 //
1. git log
  不加参数，按提交时间列出所有的更新，最近的更新排在最上面。
2. git log -p
  -p 选项展开显示每次提交内容的差异
3. git log -n
  -2 仅展示最近 n 次的更新
4. git log --stat
   仅显示简要的增改行数统计
5. git log --pretty=(oneline | short | full | fuller)
   各种不同的展示信息
6. git log --pretty=format:"%h - %an"
   选项
    %H  提交对象（commit）的完整哈希字串
    %h  提交对象的简短哈希字串
    %T  树对象（tree）的完整哈希字串
    %t  树对象的简短哈希字串
    %p  父对象（parent）的完整的哈希字串
    %P  父对象的简短哈希字串
    %an 作者（author）的名字
    %ae 作者的电子邮件地址
    %ad 作者修订日期（可以用 -date= 选项定制格式）
    %ar 作者修订日期，按多久以前的方式显示
    %cn 提交者(committer)的名字
    %ce 提交者的电子邮件地址
    %cd 提交日期
    %cr 提交日期，按多久以前的方式显示
    %s  提交说明

7. git log --pretty=format:"%h - $s" --graph
   展示了每个提交所在的分支及其分化衍合情况

8. 其他选项
   -(n) 仅显示最近的 n 条提交
   --since, --after 仅显示指定时间之后的提交
   --until, --before 仅显示指定时间之前的提交
   --author 仅显示指定作者相关的提交
   --committer 仅显示指定提交者相关的提交

9. example
   查看 Git 仓库中，2018 年 3 月期间，imtaotao 提交的但未合并的测试脚本（位于项目的 src/ 目录下的文件），可以用下面的查询命令：
   git log --pretty="%h - %s" --author=imtatao --since="2018-03-01" --no-merges -- src/

10. git reflog
    git log 不能查看删除的 commit, 而 git reflog 可以查看删除后的commit

11. git log -g
    此命令会查看详细的信息，包括 reflog 的

// 、、、、、、、、、、、、、、、、、 撤销操作 、、、、、、、、、、、、、、、、、、 //
1. 修改最后一次提交
   a> 如果刚才提交完没有作任何改动，直接运行此命令的话，相当于有机会重新编辑提交说明，但将要提交的文件快照和之前的一样
   b> 如果刚才提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行 --amend 提交
   example
     git commit -m 'error commit'
     git add file
     git commit --amend

2. 取消已经暂存的文件(参数不同，作用不同)
   a> 如果不小心 git add . (文件层面)
   git reset (HEAD | hash) (file | .)
   b> 回退版本 （提交层面）
   git reset (HEAD~n | hash)
   c> 在保证你修改的基础上撤销一次 commit（提交层面）
   git reset --soft HEAD~1
   d> 连修改一起删除的（提交层面）
   git reset --hard HEAD~1

3. 取消对文件的修改
   git checkout file
   a> 务必小心 checkout .,可能会让一整天的工作成果都丢失


// 、、、、、、、、、、、、、、、、、 远程仓库的使用 、、、、、、、、、、、、、、、、、、 //
1. 查看当前远程库和添加远程仓库
   a> git remote -v
   如果有多个远程仓库，此命令将全部列出

   b> git remote show remote-name
   获得远程分支的更多信息

   c> git ls-remote
   显式地获得远程引用的完整列表

   d> git remote add remote-name url
   添加远程仓库

2. 从远程仓库抓取数据
   git fetch remote-name
   此命令会到远程仓库中拉取所有你本地仓库中还没有的数据
*  fetch 命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支，只有当你确实准备好了，才能手工合并

3. 推送数据到远程仓库
   git push remote-name branch-name:远程分支
   example
   git push origin HEAD:test
   a> 可以使用 git remote show remote-name 查看省略 remote 和 branch 的时候的默认名字
   b> 如果其他人推送了若干更新，那你的推送操作就会被驳回。你必须先把他们的更新抓取到本地，合并到自己的项目中，
   然后才可以再次推送
   c> 如果省略远程分支名，则表示将本地分支推送与之存在"追踪关系"的远程分支，如果远程分支不存在，则会新建
   d> 删除远程分支
   git push origin --delete master
   e> 如果远程主机的版本比本地版本更新，推送时 Git 会报错，要求先在本地做 git pull 合并差异，可以使用
   --force选项，结果会导致远程主机上更新的版本被覆盖。
   git push --force origin
   f> git push remote-name  :远程分支
   相当于提交了一个空的分支到远程分支，相当于删除远程分支

4. 查看远程仓库信息
   git remote show remote-name
   a> 可以查看默认 push 和 pull 的分支

5. 远程仓库的重命名
   git remote rename oldName newName

6. 远程仓库的删除
   git remote rm remote-name

// 、、、、、、、、、、、、、、、、、 打标签 、、、、、、、、、、、、、、、、、、 //
1. 列出所有的标签
   git tag
   a> 可以用特定的搜索模式列出标签
   example
   对 1.4.2 系列的版本感兴趣
   git tag -l 'v1.4.2.*'

2. 新建标签
   a> 含标注的标签
   git tag -a v1.4 -m 'information'
   b> 后期加注标签
   git tag -a v1.2 hash
   example
   git tag -a v1.2 9fceb02

3. 分享标签（默认情况下是不会把标签传送到远程服务器）
   a> git push origin tagname
   b> 如果要一次推送所有本地新增标签上去
   git push origin --tags


// 、、、、、、、、、、、、、、、、、 技巧和窍门 、、、、、、、、、、、、、、、、、、 //
1. Git 命令别名
   example
   git config --global alias.ci commit